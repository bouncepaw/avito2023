info:
  title: "Customer segmentation"
  version: "1.0.0"
  contact:
    email: "bouncepaw2@ya.ru"
host: "localhost:5000"
basePath: "/"
consumes: ["application/json"]
produces: ["application/json"]
schemes: ["http"]
swagger: "2.0"
paths:
  /create_segment:
    post:
      description: Create a new segment.
      parameters:
        - name: "body"
          in: "body"
          schema:
            type: "object"
            required: ["name"]
            properties:
              name:
                type: string
          required: true
          description: "Name of the new segment you want to create."
      responses:
        200:
          $ref: '#/responses/segment200'
  /delete_segment:
    post:
      description: Delete a segment.
      parameters:
        - name: "body"
          in: "body"
          schema:
            type: "object"
            required: ["name"]
            properties:
              name:
                type: string
          required: true
      responses:
        200:
          $ref: '#/responses/segment200'
  /update_user:
    post:
      description: Update user's segments.
      parameters:
        - name: "body"
          in: "body"
          schema:
            type: "object"
            required: ["id"]
            properties:
              name:
                type: integer
              add_to_segments:
                type: array
                items:
                  type: string
              remove_from_segments:
                type: array
                items:
                  type: string
          required: true
      responses:
        200:
          $ref: '#/responses/segment200'
  /get_segments:
    post:
      description: Get segments that the user is part of.
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            type: object
            required: [id]
            properties:
              id:
                type: integer
      responses:
        200:
          description: Results.
          schema:
            type: object
            required: [status]
            properties:
              status:
                type: string
                enum: [ok, error]
              error:
                type: string
              segments:
                type: array
                items:
                  type: string
responses:
  segment200:
    description: Result of the operation.
    schema:
      type: "object"
      required: ["status"]
      properties:
        status:
          type: string
          enum: ["ok", "error"]
          description: |
            Status of the operation. If `ok`, then the operation went correctly, and you can ignore the `error` field. If `error`, an error occured which is specified in the `error` field.
        error:
          type: string
          description: |
            Explanation of the error. Set only if `status` is `error`.
            
            Values:
            * `name taken` means the provided name is taken already and cannot be used for new segments.
            * `name free` means that no segment with the given name exists.
            * Other values are internal errors.
parameters: {}