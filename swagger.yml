info:
  title: "Customer segmentation"
  version: "1.0.0"
  contact:
    email: "bouncepaw2@ya.ru"
host: "localhost:8080"
basePath: "/"
consumes: ["application/json"]
produces: ["application/json"]
schemes: ["http"]
swagger: "2.0"
paths:
  /create_segment:
    post:
      description: Create a new segment.
      parameters:
        - name: "body"
          in: "body"
          schema:
            type: "object"
            required: ["name"]
            properties:
              name:
                type: string
                description: |
                  Name of a new segment. You cannot use a name that an existing segment or a
                  segment that was deleted used.
              percent:
                type: integer
                description: |
                  Probabillity that new known users will also be part of this segment without
                  explicitly requesting so. Default: 0.
                minimum: 0
                maximum: 100
          required: true
          description: "Name of the new segment you want to create."
      responses:
        200:
          $ref: '#/responses/segment200'
  /delete_segment:
    post:
      description: Delete a segment.
      parameters:
        - name: "body"
          in: "body"
          schema:
            type: "object"
            required: ["name"]
            properties:
              name:
                type: string
                description: |
                  Name of the segment to delete.
          required: true
      responses:
        200:
          $ref: '#/responses/segment200'
  /update_user:
    post:
      description: |
        Update user's segments. First, the user is added to the specified segments.
        Then, the user is removed from the specified segments.
        
        If TTL is specified, the user is removed from the added segments when the
        time comes. In case they were removed from any of the segments already,
        that segment is ignored.
      parameters:
        - name: "body"
          in: "body"
          schema:
            type: "object"
            required: ["id"]
            properties:
              id:
                type: integer
              add_to_segments:
                type: array
                items:
                  type: string
                description: |
                  Segments to add the user to. Duplicates are ignored.
              remove_from_segments:
                type: array
                items:
                  type: string
                description: |
                  Segments to remove the user from. Duplicates are ignored.
              ttl:
                type: integer
                description: |
                  Time to live. Seconds to wait before removing the user from all
                  the `add_to_segments` segments.
                minimum: 1
          required: true
      responses:
        200:
          $ref: '#/responses/segment200'
  /get_segments:
    post:
      description: Get segments that the user is part of.
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            type: object
            required: [id]
            properties:
              id:
                type: integer
      responses:
        200:
          description: Results.
          schema:
            type: object
            required: [status]
            properties:
              status:
                type: string
                enum: [ok, error]
              error:
                type: string
              segments:
                type: array
                items:
                  type: string
  /history:
    post:
      description: |
        Get a link to a CSV file that lists operations in the given month. Timezone is UTC.
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required: [year, month]
            properties:
              year:
                type: integer
                minimum: 2023
              month:
                type: integer
                minimum: 1
                maximum: 12
      responses:
        200:
          description: Link to file.
          schema:
            type: object
            required: [status]
            properties:
              status:
                type: string
                enum: [ok, error]
              error:
                type: string
                description: |
                  Set if `status` is `error`. Possible values:
                  
                  * `bad time` means the year or month you passed is invalid in general.
                  * Other values are internal or parsing errors.
              link:
                type: string
                description: |
                  If `status` is `ok`, link starts with /. Request the file at the same server.
                  If `error`, this string is empty.
    get:
      description: |
        CSV file with operations for the given month.
      produces: [text/csv]
      parameters:
        - name: year
          in: query
          required: true
          type: integer
          minimum: 2023
        - name: month
          in: query
          required: true
          type: integer
          minimum: 1
          maximum: 12
      responses:
        200:
          description: |
            CSV file separated with semicolons (;). Columns in order:
            * User ID (integer)
            * Segment name (string)
            * Operation (`add` or `remove`)
            * Timestamp
        404:
          description: File not found.
        500:
          description: Internal server error.

responses:
  segment200:
    description: Result of the operation.
    schema:
      type: "object"
      required: ["status"]
      properties:
        status:
          type: string
          enum: ["ok", "error"]
          description: |
            Status of the operation. If `ok`, then the operation went correctly, and you can ignore the `error` field. If `error`, an error occured which is specified in the `error` field.
        error:
          type: string
          description: |
            Explanation of the error. Set only if `status` is `error`.
            
            Values:
            * `name taken` means the provided name is taken already and cannot be used for new segments.
            * `name free` means that no segment with the given name exists.
            * `already deleted` means that the segment is already deleted.
            * `bad percent` means the passed percent value is outside of 0..100 range.
            * Other values are internal or parsing errors.
parameters: {}